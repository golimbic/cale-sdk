/* tslint:disable */
/* eslint-disable */
/**
 * Cale API
 *  # About cale.app provides a scheduling API that helps developers to integrate scheduling features into their applications. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Schedule,
  ScheduleCreateChangeset,
} from '../models/index';
import {
    ScheduleFromJSON,
    ScheduleToJSON,
    ScheduleCreateChangesetFromJSON,
    ScheduleCreateChangesetToJSON,
} from '../models/index';

export interface CreateScheduleRequest {
    scheduleCreateChangeset: ScheduleCreateChangeset;
}

export interface GetSchedulesRequest {
    providerId: string;
}

export interface RemoveScheduleRequest {
    id: string;
}

/**
 * 
 */
export class SchedulesApi extends runtime.BaseAPI {

    /**
     * Create a schedule for a provider. RRULE is a string that represents a recurrence rule as defined in [RFC 5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10).
     * Create a schedule
     */
    async createScheduleRaw(requestParameters: CreateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Schedule>>> {
        if (requestParameters['scheduleCreateChangeset'] == null) {
            throw new runtime.RequiredError(
                'scheduleCreateChangeset',
                'Required parameter "scheduleCreateChangeset" was null or undefined when calling createSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduleCreateChangesetToJSON(requestParameters['scheduleCreateChangeset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScheduleFromJSON));
    }

    /**
     * Create a schedule for a provider. RRULE is a string that represents a recurrence rule as defined in [RFC 5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10).
     * Create a schedule
     */
    async createSchedule(requestParameters: CreateScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Schedule>> {
        const response = await this.createScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of schedules for a provider.
     * Get all schedules
     */
    async getSchedulesRaw(requestParameters: GetSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Schedule>>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling getSchedules().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['providerId'] != null) {
            queryParameters['provider_id'] = requestParameters['providerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/schedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScheduleFromJSON));
    }

    /**
     * Get a list of schedules for a provider.
     * Get all schedules
     */
    async getSchedules(requestParameters: GetSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Schedule>> {
        const response = await this.getSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a schedule by its ID.
     * Remove a schedule
     */
    async removeScheduleRaw(requestParameters: RemoveScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/schedules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a schedule by its ID.
     * Remove a schedule
     */
    async removeSchedule(requestParameters: RemoveScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeScheduleRaw(requestParameters, initOverrides);
    }

}
