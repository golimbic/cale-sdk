/* tslint:disable */
/* eslint-disable */
/**
 * Cale API
 *  # About cale.app provides a scheduling API that helps developers to integrate scheduling features into their applications. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Offer,
  ProviderOfferCreateChangeset,
  SlotsPayload,
} from '../models/index';
import {
    OfferFromJSON,
    OfferToJSON,
    ProviderOfferCreateChangesetFromJSON,
    ProviderOfferCreateChangesetToJSON,
    SlotsPayloadFromJSON,
    SlotsPayloadToJSON,
} from '../models/index';

export interface CreateOfferRequest {
    providerOfferCreateChangeset: ProviderOfferCreateChangeset;
}

export interface GetOfferRequest {
    id: string;
}

export interface GetOffersRequest {
    providerId?: string | null;
    serviceId?: string | null;
}

export interface GetSlotsRequest {
    id: string;
    from?: Date | null;
    until?: Date | null;
}

export interface RemoveOfferRequest {
    id: string;
}

/**
 * 
 */
export class OffersApi extends runtime.BaseAPI {

    /**
     * Creates a new provider\'s offer for a service
     * Create a new offer
     */
    async createOfferRaw(requestParameters: CreateOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Offer>>> {
        if (requestParameters['providerOfferCreateChangeset'] == null) {
            throw new runtime.RequiredError(
                'providerOfferCreateChangeset',
                'Required parameter "providerOfferCreateChangeset" was null or undefined when calling createOffer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/offers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderOfferCreateChangesetToJSON(requestParameters['providerOfferCreateChangeset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OfferFromJSON));
    }

    /**
     * Creates a new provider\'s offer for a service
     * Create a new offer
     */
    async createOffer(requestParameters: CreateOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Offer>> {
        const response = await this.createOfferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an offer by ID
     * Get an offer
     */
    async getOfferRaw(requestParameters: GetOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Offer>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOffer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/offers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfferFromJSON(jsonValue));
    }

    /**
     * Returns an offer by ID
     * Get an offer
     */
    async getOffer(requestParameters: GetOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Offer> {
        const response = await this.getOfferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all offers based on the query parameters
     * Get all offers
     */
    async getOffersRaw(requestParameters: GetOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Offer>>> {
        const queryParameters: any = {};

        if (requestParameters['providerId'] != null) {
            queryParameters['provider_id'] = requestParameters['providerId'];
        }

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/offers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OfferFromJSON));
    }

    /**
     * Returns a list of all offers based on the query parameters
     * Get all offers
     */
    async getOffers(requestParameters: GetOffersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Offer>> {
        const response = await this.getOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of available time slots for an offer
     * Get slots for an offer
     */
    async getSlotsRaw(requestParameters: GetSlotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SlotsPayload>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSlots().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString();
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = (requestParameters['until'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/offers/{id}/slots`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlotsPayloadFromJSON(jsonValue));
    }

    /**
     * Returns a list of available time slots for an offer
     * Get slots for an offer
     */
    async getSlots(requestParameters: GetSlotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SlotsPayload> {
        const response = await this.getSlotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an offer by ID
     * Remove an offer
     */
    async removeOfferRaw(requestParameters: RemoveOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeOffer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/offers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes an offer by ID
     * Remove an offer
     */
    async removeOffer(requestParameters: RemoveOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeOfferRaw(requestParameters, initOverrides);
    }

}
