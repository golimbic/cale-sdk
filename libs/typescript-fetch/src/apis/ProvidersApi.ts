/* tslint:disable */
/* eslint-disable */
/**
 * Cale API
 *  # About cale.app provides a scheduling API that helps developers to integrate scheduling features into their applications. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Provider,
  ProviderCreateChangeset,
  ProviderUpdateChangeset,
} from '../models/index';
import {
    ProviderFromJSON,
    ProviderToJSON,
    ProviderCreateChangesetFromJSON,
    ProviderCreateChangesetToJSON,
    ProviderUpdateChangesetFromJSON,
    ProviderUpdateChangesetToJSON,
} from '../models/index';

export interface CreateProviderRequest {
    providerCreateChangeset: ProviderCreateChangeset;
}

export interface GetProviderRequest {
    id: string;
}

export interface UpdateProviderRequest {
    id: string;
    providerUpdateChangeset: ProviderUpdateChangeset;
}

/**
 * 
 */
export class ProvidersApi extends runtime.BaseAPI {

    /**
     * Create a new provider
     * Create a provider
     */
    async createProviderRaw(requestParameters: CreateProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters['providerCreateChangeset'] == null) {
            throw new runtime.RequiredError(
                'providerCreateChangeset',
                'Required parameter "providerCreateChangeset" was null or undefined when calling createProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/providers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderCreateChangesetToJSON(requestParameters['providerCreateChangeset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Create a new provider
     * Create a provider
     */
    async createProvider(requestParameters: CreateProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.createProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a provider by ID
     * Get a provider
     */
    async getProviderRaw(requestParameters: GetProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Returns a provider by ID
     * Get a provider
     */
    async getProvider(requestParameters: GetProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.getProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all providers
     * Get all providers
     */
    async getProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Provider>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderFromJSON));
    }

    /**
     * Returns a list of all providers
     * Get all providers
     */
    async getProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Provider>> {
        const response = await this.getProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a provider by ID
     * Update a provider
     */
    async updateProviderRaw(requestParameters: UpdateProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateProvider().'
            );
        }

        if (requestParameters['providerUpdateChangeset'] == null) {
            throw new runtime.RequiredError(
                'providerUpdateChangeset',
                'Required parameter "providerUpdateChangeset" was null or undefined when calling updateProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderUpdateChangesetToJSON(requestParameters['providerUpdateChangeset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Update a provider by ID
     * Update a provider
     */
    async updateProvider(requestParameters: UpdateProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.updateProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
