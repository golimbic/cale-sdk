/* tslint:disable */
/* eslint-disable */
/**
 * Cale API
 *  # About cale.app provides a scheduling API that helps developers to integrate scheduling features into their applications. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChangeset,
  Reservation,
  ReservationUpdateChangeset,
  Status,
} from '../models/index';
import {
    CreateChangesetFromJSON,
    CreateChangesetToJSON,
    ReservationFromJSON,
    ReservationToJSON,
    ReservationUpdateChangesetFromJSON,
    ReservationUpdateChangesetToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface CreateReservationRequest {
    createChangeset: CreateChangeset;
}

export interface GetReservationRequest {
    id: string;
}

export interface ListReservationsRequest {
    fromTime: Date;
    untilTime: Date;
    status?: Status | null;
    customerId?: string | null;
    providerId?: string | null;
    offerId?: string | null;
    serviceId?: string | null;
}

export interface UpdateReservationRequest {
    id: string;
    reservationUpdateChangeset: ReservationUpdateChangeset;
}

/**
 * 
 */
export class ReservationsApi extends runtime.BaseAPI {

    /**
     * When a reservation is created, it is in a `hold` status. It\'s up to the application to decide when to transition the reservation to a `confirmed` status and how long to keep it in a `hold` status.
     * Create a reservation hold
     */
    async createReservationRaw(requestParameters: CreateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters['createChangeset'] == null) {
            throw new runtime.RequiredError(
                'createChangeset',
                'Required parameter "createChangeset" was null or undefined when calling createReservation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/reservations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChangesetToJSON(requestParameters['createChangeset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * When a reservation is created, it is in a `hold` status. It\'s up to the application to decide when to transition the reservation to a `confirmed` status and how long to keep it in a `hold` status.
     * Create a reservation hold
     */
    async createReservation(requestParameters: CreateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.createReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a reservation by its ID.
     * Get a reservation
     */
    async getReservationRaw(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getReservation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/reservations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * Get a reservation by its ID.
     * Get a reservation
     */
    async getReservation(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.getReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List reservations within a time range.
     * Get all reservations
     */
    async listReservationsRaw(requestParameters: ListReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Reservation>>> {
        if (requestParameters['fromTime'] == null) {
            throw new runtime.RequiredError(
                'fromTime',
                'Required parameter "fromTime" was null or undefined when calling listReservations().'
            );
        }

        if (requestParameters['untilTime'] == null) {
            throw new runtime.RequiredError(
                'untilTime',
                'Required parameter "untilTime" was null or undefined when calling listReservations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fromTime'] != null) {
            queryParameters['from_time'] = (requestParameters['fromTime'] as any).toISOString();
        }

        if (requestParameters['untilTime'] != null) {
            queryParameters['until_time'] = (requestParameters['untilTime'] as any).toISOString();
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['customerId'] != null) {
            queryParameters['customer_id'] = requestParameters['customerId'];
        }

        if (requestParameters['providerId'] != null) {
            queryParameters['provider_id'] = requestParameters['providerId'];
        }

        if (requestParameters['offerId'] != null) {
            queryParameters['offer_id'] = requestParameters['offerId'];
        }

        if (requestParameters['serviceId'] != null) {
            queryParameters['service_id'] = requestParameters['serviceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/reservations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReservationFromJSON));
    }

    /**
     * List reservations within a time range.
     * Get all reservations
     */
    async listReservations(requestParameters: ListReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Reservation>> {
        const response = await this.listReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a reservation by its ID. Use this endpoint to transition a reservation from a `hold` and assign a customer to it.
     * Update a reservation
     */
    async updateReservationRaw(requestParameters: UpdateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateReservation().'
            );
        }

        if (requestParameters['reservationUpdateChangeset'] == null) {
            throw new runtime.RequiredError(
                'reservationUpdateChangeset',
                'Required parameter "reservationUpdateChangeset" was null or undefined when calling updateReservation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // cale_api_key authentication
        }

        const response = await this.request({
            path: `/reservations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationUpdateChangesetToJSON(requestParameters['reservationUpdateChangeset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * Update a reservation by its ID. Use this endpoint to transition a reservation from a `hold` and assign a customer to it.
     * Update a reservation
     */
    async updateReservation(requestParameters: UpdateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.updateReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
